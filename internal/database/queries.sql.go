// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: queries.sql

package database

import (
	"context"
)

const authorsInsert = `-- name: AuthorsInsert :one
insert into authors (name) values (?1) returning id, name, created_at
`

func (q *Queries) AuthorsInsert(ctx context.Context, name string) (Author, error) {
	row := q.db.QueryRowContext(ctx, authorsInsert, name)
	var i Author
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const authorsList = `-- name: AuthorsList :many
select id, name, created_at from authors
`

func (q *Queries) AuthorsList(ctx context.Context) ([]Author, error) {
	rows, err := q.db.QueryContext(ctx, authorsList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
